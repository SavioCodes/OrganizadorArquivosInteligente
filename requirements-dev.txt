# Organizador de Arquivos Inteligente 2025 - Dependências de Desenvolvimento
# Versão: 2.0.0 | Autor: SavioCodes - https://github.com/SavioCodes

# ============================================================================
# DEPENDÊNCIAS DE DESENVOLVIMENTO E TESTES
# ============================================================================

# Dependências básicas do projeto
-r requirements.txt

# ============================================================================
# TESTES E QUALIDADE DE CÓDIGO
# ============================================================================

# Framework de testes
pytest>=7.4.0
pytest-cov>=4.1.0          # Cobertura de código
pytest-asyncio>=0.21.0     # Testes assíncronos
pytest-mock>=3.12.0        # Mocking para testes
pytest-xdist>=3.5.0        # Execução paralela de testes

# Análise de código
flake8>=6.1.0              # Linting
mypy>=1.7.0                # Verificação de tipos
black>=23.11.0             # Formatação de código
isort>=5.12.0              # Organização de imports
bandit>=1.7.5              # Análise de segurança

# Documentação
sphinx>=7.2.0             # Geração de documentação
sphinx-rtd-theme>=1.3.0   # Tema para documentação

# ============================================================================
# FERRAMENTAS DE DESENVOLVIMENTO
# ============================================================================

# Profiling e performance
memory-profiler>=0.61.0   # Análise de memória
psutil>=5.9.0             # Informações do sistema
line-profiler>=4.1.0     # Profiling linha por linha

# Debugging
pdb++>=0.10.3             # Debugger melhorado
ipython>=8.17.0          # Shell interativo melhorado

# ============================================================================
# DEPENDÊNCIAS OPCIONAIS AVANÇADAS
# ============================================================================

# Interface gráfica moderna
customtkinter>=5.2.0      # Tkinter moderno
ttkthemes>=3.2.2          # Temas adicionais

# Logs e output colorido
colorama>=0.4.6           # Cores no terminal
rich>=13.7.0              # Output rico no terminal

# Análise de arquivos
exifread>=3.0.0           # Metadados EXIF
pillow>=10.0.0            # Processamento de imagens
python-magic>=0.4.27     # Detecção de tipos MIME

# Compressão avançada
py7zr>=0.21.0             # Suporte a 7z
rarfile>=4.1              # Suporte a RAR

# Processamento assíncrono
aiofiles>=23.0.0          # I/O assíncrono de arquivos

# ============================================================================
# FERRAMENTAS DE BUILD E DEPLOY
# ============================================================================

# Empacotamento
build>=1.0.0             # Build de pacotes
twine>=4.0.0             # Upload para PyPI
wheel>=0.42.0            # Criação de wheels

# Versionamento
bump2version>=1.0.1      # Gerenciamento de versões

# ============================================================================
# DESENVOLVIMENTO WEB (FUTURO)
# ============================================================================

# API e Web
fastapi>=0.104.0         # Framework web moderno
uvicorn>=0.24.0          # Servidor ASGI
jinja2>=3.1.0            # Templates
pydantic>=2.5.0         # Validação de dados

# ============================================================================
# ANÁLISE E MONITORAMENTO
# ============================================================================

# Métricas e monitoramento
prometheus-client>=0.19.0 # Métricas Prometheus
structlog>=23.2.0        # Logging estruturado

# ============================================================================
# COMANDOS ÚTEIS PARA DESENVOLVIMENTO
# ============================================================================

# Instalar dependências de desenvolvimento:
# pip install -r requirements-dev.txt

# Executar testes:
# pytest

# Executar testes com cobertura:
# pytest --cov=organizer --cov-report=html

# Verificar qualidade do código:
# flake8 organizer.py
# mypy organizer.py
# black --check organizer.py
# isort --check-only organizer.py

# Formatar código:
# black organizer.py
# isort organizer.py

# Análise de segurança:
# bandit -r .

# Profiling de memória:
# python -m memory_profiler organizer.py

# Gerar documentação:
# sphinx-build -b html docs/ docs/_build/

# Build do pacote:
# python -m build

# ============================================================================
# CONFIGURAÇÃO DE AMBIENTE
# ============================================================================

# Variáveis de ambiente para desenvolvimento:
# export PYTHONPATH="${PYTHONPATH}:$(pwd)"
# export PYTEST_CURRENT_TEST=1

# Pre-commit hooks (opcional):
# pre-commit>=3.6.0
